# linear structure: items are ordered depending on how they are added or removed
# linear structure has two ends

# Stack - lifo (last-in-first-out)
# ordered collection of items where the addition of new items and the removal
# of existing items always takes place at the same end
# Stack() - create empty stack
# push(item) - add a new item to the top of the stack
# pop() - remove top items (and return the removed item) from the stack
# peek() - return the top item but not remove
# isEmpty()
# size()

class Stack:
    def __init__(self):
        self.items = []
    def isEmpty(self):
        return self.item == []
        
    def push(self, item):
        self.items.append(item)
        
    def pop(self):
        return(self.items.pop())
    def peek(self):
        return(self.items[len(self.items)-1]
        
    def size(self):
        return(len(self.items))
        
       
from pythonds.basic import Stack

def parChecker(symbolString):
    s = Stack()
    balanced = True
    index = 0
    while index < len(symbolString) and balanced:
        symbol = symbolString[index]
        if symbol == '([{':
            s.push(symbol)
        else:
            if s.isEmpty():
                balanced = False
            else:
                top = s.pop()
                if not matches(top, symbol):
                    balanced = False
        index = index + 1
    if balanced and s.isEmpty():
        return True
    else: 
        return False
def matches(top, bottom):
    opens = '([{'
    closers = ')]}'
    return(opens.index(top) == closer.index(bottom))
    
    
# if return a stack, it wont generate the correct string - would be just a 
# <pythonds.basic.stack.Stack object>

def baseConverter(decNumber, base):
    digits = '0123456789ABCDEF'
    remstack = Stack()
    while decNumber > 0:
        rem = decNumber % base
        remstack.push(rem)
        decNumber = decNumber //base
    binString = ''
    while not remstack.isEmpty():
        binString = binString + digits[remstack.pop()]
    return binString

# infix : a+b , a+b*c , (a+b)*c
# prefix : +ab , +a*bc , *+abc
# postfix : ab+ , abc*+ , ab+c *

# general infix-to-postfix conversion
def infixToPostfix(infixexpr):
      prec = {}
      prec['**'] = 4
      prec['*'] = 3
      prec['/'] = 3
      prec['+'] = 2
      prec['-'] = 2
      prec['('] = 1
      opstack = Stack()
      tokenlist = infixexpr.split()
      postfixlist = []

      for i in tokenlist:
          if i in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" or token in "0123456789":
              postfixlist.append(i) 
          elif i =='('
              opstack.push(i)
          elif i ==')'
              topi=opstack.pop()
              while topi != '(':
                  postfixlist.append(topi)
                  topi=opstack.pop()
          else:
              while(not opstack.isEmpty()) and (prec[opstack.peek()]>prec[token]):
                  postfixlist.append(opstack.pop())
              opstack.push(i)


       while not opstack.isEmpty():
          postfixlist.append(opstack.pop())
       return "".join(postfixlist)
       
       
def postfixEval(postfixExpr):
    operandStack = Stack()
    tokenlist = postfixExpr.split()
    for i in tokenlist:
        if i in "0123456789":
            operandStack.push(int(token))
        else:
            operand2 = operandStack.pop()
            operand1 = operandStack.pop()
            results = doMath(i, operand1, operand2)
            operandStack.push(result)
            
            
    return operandStack.pop()
def doMath(op, op1, op2):
    if op =='*':
        return op1 * op2
        
    elif op == "/":
        return op1 / op2
    elif op == "+":
        return op1 + op2
    else:
        return op1 - op2

    
# Queue: FIFO - first in first out
# the addition of new items happens at one end, called the “rear,” 
# and the removal of existing items occurs at the other end, commonly 
# called the “front.

# Queue()
# enqueue(item) -adds a new item to the rear of the queue. It needs the item and returns nothing
# dequeue() - remove and return the remove item
# isEmpty()
# size()

class Queue:
    def __init__(self):
        self.items = []
    def isEmpty(self):
        return self.items == []
    def enqueue(self,item):
        self.items.insert(0,item)
    def dequeue(self):
        return(self.items.pop())
    def size(self):
        return len(self.items)
def hotpotato(namelist, num):
    simqueue = Queue()
    for i in namelist:
        simqueue.enqueue(i)
    while simqueue.size() > 1:
        for j in range(num):
            simqueue.enqueue(simqueue.dequeue())
        simqueue.dequeue()
        
    return simqueue.dequeue()


# printer task
# 3 components
# printer, task, printqueue
class Printer:
    def __init__(self, ppm):
        self.pagerate = ppm
        self.currentTask = None
        self.timeRemaining = 0
        
    def tick(self):
        if self.currentTask != None:
            self.timeRemaining = self.timeRemaining -1
            if self.timeRemaining <= 0:
                self.currentTask = None
      
    def busy(self):
        if(self.currentTask != None):
            return True
        else:
            return False
    
    def startNext(self,newtask):
        self.currentTask = newtask
        self.timeRemaining = newtask.getPages() * 60/self.pagerate
        
import random
class Task:
    def __init__(self,time):
        self.timestamp = time
        self.pages = random.randrange(1,21)
    def getStamp(self):
        return self.timestamp
    def getPages(self):
        return self.pages
    def waitTime(self,currenttime):
        return currenttime - self.timestamp
        
def simulation(numSeconds, pagesPerMinute):
    labprinter = Printer(pagesPerMinute)
    printQueue = Queue()
    waitingtimes = []
    
    for i in range(numSeconds):
        if newPrintTask():
            task = Task(i)
            printQueue.enque(task)
        if (not labprinter.busy()) and (not printQueue.isEmpty()):
            nexttask = printQueue.dequeue()
            waitingtimes.append(nexttask.waitTime(currentSecond))
            labprinter.startNext(nexttask)
        labprinter.tick()
    averageWait=sum(waitingtimes)/len(waitingtimes)
    print("Average Wait %6.2f secs %3d tasks remaining."%(averageWait,printQueue.size()))

def newPrintTask():
    num = random.randrange(1,181)
    if num == 180:
        return True
    else:   
        return False
        
# Deque -two end, new items can be added eitehr at the front or the rear
# Deque()
# addFront(item) - addd not return
# addRear(item) - add not return
# removeFront() - remove and return
# removeRear() - remove and return
# isEmpty()
# size()

class Deque:
        def __init__(self):
                self.items = []
        def isEmpty(self):
                return(self.items == [])
        def addFront(self, item):
                self.items.append(item)
        def addRear(self, item):
                self.items.insert(0,item)
        def removeFront(self, item):
                return(self.items.pop())
        def removeRear(self, item):
                return(self.items.pop(0))
        def size(self):
                return(len(self.items))
                
                
def palchecker(aString):
        chardeque = Deque()
        for i in aString:
                chardeque.addRear(i)
        stillEqual = True
        while chardeque.size() > 1 and stillEqual:
                first = chardeque.removeFront() 
                last = chardeque.removeRear()
                if first != last:
                        return False
        return stillEqual
        
        
# list - unordered
# List()
# add(item)
# remove(item)
# search(item)
# isEmpty()
# size()
# append(item)
# index(item)
# insert(pos, item)
# pop()
# pop(pos)


class Node:
        def __init__(self, initdata):
                self.data = initdata
                self.next = None
        def getData(self):
                return(self.data)
        def getNext(self):
                return(self.next)
        def setData(self, newdata):
                self.data = newdata
        def setNext(self,newnext):
                self.next = newnext
                
class UnorderedList:
        def __init__(self):
                self.head = None
        def isEmpty(self):
                return(self.head == None)
        def add(self, item):
                temp = None(item)
                temp.setNext(self.head)
                temp.head = temp
        def size(self):
                count = 0
                current = self.head
                while current != None:
                        current = current.getNext()
                        count = count + 1
                return count
        def search(self, item):
                current = self.head
                found = False
                while current != None and not found:
                        if current.getData == item:
                                found = True
                        else:
                                current = current.getNext()
                return found
                
        def remove(self, item):
                current = self.head
                previous = None
                found = False
                while not found:
                    if current.getData() == item:
                            found = True
                    else:
                            previous = current
                            current = current.getNext()
                if previous == None:
                        self.head = current.getNext()
                else:
                    previous.setNext(current.getNext())
                    
# ordered list
# OrderedList()
# add(item)
# remove(item)
# search(item)
# isEmpty()
# size()
# index(item)
# pop()
# pop(pos)


class OrderedList:
        def __init__(self):
                self.head = None
        def search(self, item):
                current = self.head
                found = False
                stop = False
                while current != None and not found and not stop:
                        if current.getData() == item:
                                found = True
                        else:
                                if current.getData() > item:
                                        stop = True
                                else:
                                        current = current.getNext()
                return(found)
                
                
        def add(self, item):
                current = self.head
                previous = None
                stop = False
                while current != None and not stop:
                        if current.getData() > item:
                                stop = True
                        else:
                                previous = current
                                current = current.getNext()
                temp = Node(item)
                if previous == None:
                        temp.setNext(self.head)
                        self.head = temp
                else:
                        temp.setNext(current)
                        previous.setNext(temp)
 
