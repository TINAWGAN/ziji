def gcd(a, b):
    if a == 0 or b == 0:
        return(None)
    if n < m:
        n, m = m, n
    while n %m !=0:
        old_n = n
        old_m = m
        n = old_m
        m = old_n % old_m
    return(m)

class Fraction:
    def __init__(self, top, bottom):
    # 5
        if isinstance(top, int):
            raise(ValueError({''is not an integer}.format(top)))
        if isinstance(bottom, int):
            raise(ValueError({''is not an integer}.format(top)))
    # 6
        self.num = abs(top)
        self.den = abs(bottom)
        common = gcd(top, bottom)
        self.num = self.num//common 
        self.den = self.den//common
    def show(self):
        print(self.num,'/', self.den)
    
    # 1.
    def getNum(self):
        return(self.num)
    def getDen(self):
        return(self.den)
        
    # 2.
    def __add__(self, other):
        new_num = (self.num* other.den) + (self.den * other.num)
        new_den = self.den * other.den
        return(Fraction(new_num, new_den))
       
        # common = gcd(new_num, new_den)
        # return Fraction(new_num // common, new_den // common)
        
    # 3.
    def __sub__(self, other):
        new_num = (self.num* other.den) - (self.den * other.num)
        new_den = self.den * other.den
        common = gcd(abs(num), abs(den))
        return(Fraction(new_num, new_den))
        
    def __mul__(self, other):
        new_num = self.num * other.num
        new_den = self.den * other.den
        common = gcd(abs(num), abs(den))
        return(Fraction(new_num, new_den)
        
    def __truediv__(self, other):
        num = self.num * other.den
        den = self.den * other.num
        common = gcd(abs(num), abs(den))
        return Fraction(num // common, den // common)
        
        
    # 4
    def __gt__(self, other):
         self_new = self.num * other.den
         other_new = other.num * self.den
         return(self_new > other_new)
         
    def __ge__(self, other):
         self_new = self.num * other.den
         other_new = other.num * self.den
         return(self_new >= other_new)
         
         
    def __lt__(self, other):
         self_new = self.num * other.den
         other_new = other.num * self.den
         return(self_new < other_new)
         
         
    def __le__(self, other):
         self_new = self.num * other.den
         other_new = other.num * self.den
         return(self_new <= other_new)
    
    def __ne__(self, other):
         self_new = self.num * other.den
         other_new = other.num * self.den
         return(self_new != other_new)
    
    # 7
    def __radd__(self, other):
        if other == 0:
            return(self)
        else:
            other = Fraction(other,1)
            return(self.__add(other))
            
            
    # 8
    def __iradd__(self, other):
        if isinstance(other, in):
            other = Fraction(other, 1)
        return(self.__add__(other))
    
    def __str__(self):
        return(str(self.num) + '/' + str(self.den))
        
   # 9
    def __repr__(self):
        return('%s(%r)') % (self.__class__, self.__str__())
        
    
        
# 1. Implement the simple methods getNum and getDen that will return the numerator and denominator of a fraction.

# 2. In many ways it would be better if all fractions were maintained in lowest terms right from the start. Modify the constructor for the Fraction class so that 
# GCD is used to reduce fractions immediately. Notice that this means the __add__ function no longer needs to reduce. Make the necessary modifications.

# 3. Implement the remaining simple arithmetic operators (__sub__, __mul__, and __truediv__).

# 4. Implement the remaining relational operators (__gt__, __ge__, __lt__, __le__, and __ne__)

# 5. Modify the constructor for the fraction class so that it checks to make sure that the numerator and denominator are both integers. 
# If either is not an integer the constructor should raise an exception.

# 6. In the definition of fractions we assumed that negative fractions have a negative numerator and a positive denominator. 
# Using a negative denominator would cause some of the relational operators to give incorrect results. 
# In general, this is an unnecessary constraint. Modify the constructor to allow the user to pass a negative denominator so that 
# all of the operators continue to work properly.

# 7. Research the __radd__ method. How does it differ from __add__? When is it used? Implement __radd__.

# 8. Repeat the last question but this time consider the __iadd__ method.

# 9. Research the __repr__ method. How does it differ from __str__? When is it used? Implement __repr__.

# 10. Research other types of gates that exist (such as NAND, NOR, and XOR). Add them to the circuit hierarchy. How much additional coding did you need to do?

# 11. The most simple arithmetic circuit is known as the half-adder. Research the simple half-adder circuit. Implement this circuit.

# 12. Now extend that circuit and implement an 8 bit full-adder.

# 13. The circuit simulation shown in this chapter works in a backward direction. In other words, given a circuit, the output is produced 
# by working back through the input values, which in turn cause other outputs to be queried. This continues until external input lines are found, at which point the user is asked for values. Modify the implementation so that the action is in the forward direction; upon receiving inputs the circuit produces an output.

# 14. Design a class to represent a playing card. Now design a class to represent a deck of cards. Using these two classes, implement a favorite card game.
class card(object):
        suit_names = ["Clubs", "Diamonds", "Hearts", "Spades"]
        rank_names = [None, "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace"]
        def __init__(self, suit, rank):
            self.suit = suit
            self.rank = rank
            
        def __str__(self, suit, rank):
            return(('%s in %s') %(self.suit, self.rank))
class deck(object):
        def __init__(self):
                self.card = []
                for card in range(4):
                    for rank in range(14):
                        card = card(suit, rank)
                        self.card.append(card)
        def __str__(self):
                res = []
                for i in self.card:
                    res.append(str(i))       
                return(','.join(res))
                
        def size(self):
                return(len(self.cards))
                
                
        def addcards(self, new_cards):
                self.card.append(new_cards)
        def removecard(self, remove_card):
                self.card.remove(remove_card)
            
            
        def shuffle(self):
                random.shuffle(self.card)
                
# 15. Find a Sudoku puzzle in the local newspaper. Write a program to solve the puzzle.
