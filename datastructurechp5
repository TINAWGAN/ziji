# Recursion
# calculate sum of a list
def listsum(numlist):
    theSum = 0
    for i in numlist:
        theSum = theSum + i
    return theSum

def listsum(numList):
    if len(numList) == 1:
        return numList[0]
    else:
        return numList[0] + listsum(numList[1:])
        
# 3 laws of recursion - 
# a) a recursive algorithm must have a base case
# b) a recursive algorithm must change its state and move toward the base case
# c) a recursive algorithm must call itself, recursively

def toStr(n, base):
    convertString = '0123456789ABCDEF'
    if n < base:
        return convertString[n]
    else:
        return toStr(n // base, base) + convertString[n%base]

def reverse(s):
    if len(s) == 0:
        return 0
    else:
        return reverse(s[1:] + s[0])

def palindrom(st):
    for i in range(len(st)//2):
        if st[i] != st[-1-i]:
            return False
    return True
    
    
# Stack Frames: 
rStack = Stack()
def toStr(n, base):
    convertString = '0123456789ABCDEF'
    while n > 0:
        if n < base:
            rStack.push(convertString[n])
        else:
            rStack.push(convertString[n%base])
        n = n // base
    res = ''
    while not rStack.isEmpty():
        res = res + str(rStack.pop())
    return(res)
    
    
    
# Visualizing Recursion  
import turtle
myTurtle = turtle.Turtle()
myWin = turtle.Screen()
def drawSpiral(myTurtle, lineLen):
    if lineLen > 0:
        myTurtle.forward(lineLen)
        myTurtle.right(90)
        drawSpiral(myTurtle, lineLen -5)

drawSpiral(myTurtle,100)
        
myWin.exitonclick()



import turtle
def drawTriangle(points, color, myTurtle):
    myTurtle.fillcolor(color)
    myTurtle.up()
    myTurtle.goto(points[0][0],points[0][1])
    myTurtle.down()
    myTurtle.begin_fill()
    myTurtle.goto(points[1][0],points[1][1])
    myTurtle.goto(points[2][0],points[2][1])
    myTurtle.goto(points[0][0],points[0][1])
    myTurtle.end_fill()
    
def getMid(p1, p2):
    return ( (p1[0]+p2[0])/2, (p1[1]+p2[1])/2 )
    
def sierpinski(points,degree,myTurtle):
    colormap = ['blue','red','green','white','yellow',
                'violet','orange']
    drawTriangle(points,colormap[degree],myTurtle)
    if degree > 0:
        sierpinski([points[0],
                        getMid(points[0], points[1]),
                        getMid(points[0], points[2])],
                   degree-1, myTurtle)
        sierpinski([points[1],
                        getMid(points[0], points[1]),
                        getMid(points[1], points[2])],
                   degree-1, myTurtle)
        sierpinski([points[2],
                        getMid(points[2], points[1]),
                        getMid(points[0], points[2])],
                   degree-1, myTurtle)

def main():
   myTurtle = turtle.Turtle()
   myWin = turtle.Screen()
   myPoints = [[-100,-50],[0,100],[100,-50]]
   sierpinski(myPoints,3,myTurtle)
   myWin.exitonclick()

main()
    
    
# Tower of Hanoi
def moveTower(height, fromPole, toPole, withPole):
    if height > 1:
        moveTower(height - 1, fromPole, toPole, withPole)
        moveDisk(fromPole, toPole)
        moveTower(height - 1, withPole, toPole, fromPole)
